/*
 * Billing Backend
 *
 * # API for managing billing of customers  The purpose of this API is to manage customers, articles, recurring billing, and payments.  The caller has to be authenticated with the system and provide a JWT token in the Authorization header of the HTTP request. When using the API you typically get this token by authenticating first with OAuth 2.0.  When you are trying this API using the Swagger interface, you need to click the `Authorize` button and then again the Authorize button in the pop-up that gets opened.
 *
 * The version of the OpenAPI document: 0.1.1
 * Contact: tech@p7m.de
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Customer {
    #[serde(rename = "customerId")]
    pub customer_id: String,
    #[serde(rename = "tenantId")]
    pub tenant_id: String,
    #[serde(rename = "visibleCustomerId")]
    pub visible_customer_id: i32,
    #[serde(rename = "salutation")]
    pub salutation: crate::models::Salutation,
    #[serde(rename = "companyName")]
    pub company_name: String,
    #[serde(rename = "givenName")]
    pub given_name: String,
    #[serde(rename = "familyName")]
    pub family_name: String,
    #[serde(rename = "deliveryInstructions")]
    pub delivery_instructions: String,
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "addressExtra")]
    pub address_extra: String,
    #[serde(rename = "zip")]
    pub zip: String,
    #[serde(rename = "town")]
    pub town: String,
    #[serde(rename = "country")]
    pub country: String,
    #[serde(rename = "gracePeriod")]
    pub grace_period: i32,
    #[serde(rename = "usedBankAccounts")]
    pub used_bank_accounts: Vec<String>,
    #[serde(rename = "lastChange")]
    pub last_change: String,
}

impl Customer {
    pub fn new(customer_id: String, tenant_id: String, visible_customer_id: i32, salutation: crate::models::Salutation, company_name: String, given_name: String, family_name: String, delivery_instructions: String, address: String, address_extra: String, zip: String, town: String, country: String, grace_period: i32, used_bank_accounts: Vec<String>, last_change: String) -> Customer {
        Customer {
            customer_id,
            tenant_id,
            visible_customer_id,
            salutation,
            company_name,
            given_name,
            family_name,
            delivery_instructions,
            address,
            address_extra,
            zip,
            town,
            country,
            grace_period,
            used_bank_accounts,
            last_change,
        }
    }
}


